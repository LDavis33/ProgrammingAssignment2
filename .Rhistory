library("swirl")
install.packages("swirl")
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lappy(flags, class)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(clls_vect)
class(cls_vect)
bye()
swirl()
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(, 6:17)
head(6:17)
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shape <- flags[, 19:23]
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shape, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals[, 17])
length(unique_vals)
sapply(unique_vals, length)
sapply(unique_vals, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flag$landmass, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flag$red, summary)
tapply(flags$population, flags$red, summary)
tapply(flags$populations, flags$landmass, summary)
tapply(flags$landmass, flags$populations, summary)
table(flags$populations)
tapply(flags$landmass, flags$population, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data("iris")
?iris
colmeans("iris")
colmean("iris")
mean(iris$Sepal.Length)
apply(iris, 2, mean)
apply(iris[, 1:4], 1, mean)
colMeans(iris)
apply(iris[, 1:4], 1, mean)
apply(iris, 1, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
abs(26.66364-15.10000)
debug(ls)
is
quit
exit()
bye()
quit()
library(datasets)
data(iris)
mean(iris$Sepal.Length[virginical])
list(iris$Species)
lapply(split(iris, virginica), mean)
lapply(split(iris, iris$virginica), mean)
lapply(split(iris, iris$Species), mean)
lapply(split(iris, iris$Species), mean, na.rm = TRUE)
mean(iris$Sepal.Length[Species])
mean(iris$Species)
sapply(split(iris, iris$Species), mean, na.rm = TRUE)
Onlyiris <- na.rm(iris)
vapply(split(iris, iris$Species), mean, numeric (1), na.rm = TRUE)
class(iris$Species)
viewinfo(iris)
viewinfo("iris")
summary("iris")
?iris
iris
mean(iris[101:150])
colmeans(iris[, 101:150)
colmeans(iris[, 101:150])
colMeans(iris[, 101:150])
rowMeans(101:150)
rowMeans(iris[, 101:150])
tapply(iris$Sepal.Length, iris$Species, mean)
colMeans(iris)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$cyl, mtcars$hp, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
abs(209.21429-82.63636)
makeCacheMatrix <- function(x = matrix()) {
MX <- NULL
set <- function(y) {
x <<- y
MX <<- NULL
}
get <- function() x
setInvMX <- function(inverse) inv <<- inverse
getInvMX <- function() inv
list(set = set,
get = get,
setInvMX = setInvMX,
getInvMX = getInvMX)
}
cacheSolve <- function(x, ...) {
inv <- x$getInvMX()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
A_MX <- makeCacheMatrix(matrix(2:5, 2, 2))
A_MX$get()
my_matrix$getInverse()
A_MX$getInverse()
cacheSolve(A_MX)
cacheSolve <- function(x, ...) {
inv <- x$getInvMX()
if (!is.null(MX)) {
message("getting cached data")
return(MX)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
A_MX$getInverse()
cacheSolve(A_MX)
cacheSolve <- function(x, ...) {
inv <- x$getInvMX()
if (!is.null(MX)) {
message("getting cached data")
return(MX)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
cacheSolve(A_MX)
cacheSolve <- function(x, ...) {
inv <- x$getInvMX()
if (!is.null(MX)) {
message("getting cached data")
return(MX)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(MX)
MX
}
cacheSolve(A_MX)
cacheSolve <- function(x, ...) {
inv <- x$getInvMX()
if (!is.null(MX)) {
message("getting cached data")
return(MX)
}
mDat <- x$get()
MX <- solve(mDat, ...)
x$setInverse(MX)
MX
}
cacheSolve(A_MX)
cacheSolve <- function(x, ...) {
MX <- x$getInvMX()
if (!is.null(MX)) {
message("getting cached data")
return(MX)
}
mDat <- x$get()
MX <- solve(mDat, ...)
x$setInverse(MX)
MX
}
cacheSolve(A_MX)
cacheSolve <- function(x, ...) {
MX <- x$getInvMX()
if (!is.null(MX)) {
message("getting cached data")
return(MX)
}
mDat <- x$get()
MX <- solve(mDat, ...)
x$setInvMX(MX)
MX
}
cacheSolve(A_MX)
cacheSolve <- function(x, ...) {
MX <- x$getInverse()
if (!is.null(MX)) {
message("getting cached data")
return(MX)
}
mDat <- x$get()
MX <- solve(mDat, ...)
x$setInverse(MX)
MX
}
cacheSolve(A_MX)
makeCacheMatrix <- function(x = matrix()) {
MX <- NULL
set <- function(y) {
x <<- y
MX <<- NULL
}
get <- function() x
setInvMX <- function(inverse) MX <<- inverse
getInvMX <- function() MX
list(set = set,
get = get,
setInverseMX = setInverseMX,
getInverseMX = getInverseMX)
}
cacheSolve <- function(x, ...) {
MX <- x$getInverseMX()
if (!is.null(MX)) {
message("getting cached data")
return(MX)
}
mDat <- x$get()
MX <- solve(mDat, ...)
x$setInverseMX(MX)
MX
}
A_MX$get()
makeCacheMatrix <- function(x = matrix()) {
MX <- NULL
set <- function(y) {
x <<- y
MX <<- NULL
}
get <- function() x
setInverseMX <- function(inverse) MX <<- inverse
getInverseMX <- function() MX
list(set = set,
get = get,
setInverseMX = setInverseMX,
getInverseMX = getInverseMX)
}
cacheSolve <- function(x, ...) {
MX <- x$getInverseMX()
if (!is.null(MX)) {
message("getting cached data")
return(MX)
}
mDat <- x$get()
MX <- solve(mDat, ...)
x$setInverseMX(MX)
MX
}
A_MX$getInverseMX()
A_MX$getInverse()
makeCacheMatrix <- function(x = matrix()) {
MX <- NULL
set <- function(y) {
x <<- y
MX <<- NULL
}
get <- function() x
setInverse <- function(inverse) MX <<- inverse
getInverse <- function() MX
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...) {
MX <- x$getInverse()
if (!is.null(MX)) {
message("getting cached data")
return(MX)
}
mDat <- x$get()
MX <- solve(mDat, ...)
x$setInverse(MX)
MX
}
A_MX <- makeCacheMatrix(matrix(2:5, 2, 2))
A_MX$get()
A_MX$getInverse()
cacheSolve(A_MX)
A_MX$getInverse()
View(flag_colors)
